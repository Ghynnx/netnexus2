
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import java.io.FileWriter;
import java.util.Date;
import org.json.simple.JSONObject;
import java.text.SimpleDateFormat;

/**
 *
 * @author User
 */
public class LoginW extends javax.swing.JFrame {

    private static String usname, pass;

    private static final String filepath = "C:\\Users\\User\\Documents\\NetBeansProjects\\NetNexus\\src\\netnexus.json";
    private static JSONParser jsonParser = new JSONParser();
    private static JSONObject record = new JSONObject();
    private static JSONArray users = new JSONArray();

    /**
     * Creates new form LoginW
     */
    public LoginW() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passPF = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 36)); // NOI18N
        jLabel1.setText("LOGIN");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Username:");

        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Password:");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(387, 387, 387)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(nameTF)
                                    .addComponent(passPF, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))))
                        .addGap(0, 398, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(424, 424, 424)
                        .addComponent(loginBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(loginBtn)
                .addContainerGap(167, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        String usernameInput = nameTF.getText().trim(); // Get username input
        String passwordInput = new String(passPF.getPassword()).trim(); // Get password input
        try {
            handleUserLogin(usernameInput, passwordInput);
        } catch (IOException ex) {
            Logger.getLogger(LoginW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed

// Validate if the username and password match
    private boolean isLoginValid(JSONObject userObject, String usernameInput, String passwordInput) {
        String storedUsername = ((String) userObject.get("username")).toLowerCase(); // Case-insensitive username
        String storedPassword = (String) userObject.get("password"); // Case-sensitive password

        return usernameInput.toLowerCase().equals(storedUsername) && passwordInput.equals(storedPassword);
    }

// Check if the user is an admin
    private boolean isAdmin(String usernameInput) {
        return "admin".equalsIgnoreCase(usernameInput);
    }

// Process login for regular users
// Process login for regular users or exempt admin from balance check
    // Process login for regular users or exempt admin from balance check
    private boolean processRegularUserLogin(JSONObject userObject, String usernameInput) {
        if (isAdmin(usernameInput)) {
            // Admins are exempt from balance checks
            return true;
        }

        long balance = getBalance(userObject);

        if (balance <= 0) {
            JOptionPane.showMessageDialog(this, "Login failed: Your balance is zero. Please top up your account.", "Login Failed", JOptionPane.ERROR_MESSAGE);
            return false; // Stop login process if balance is insufficient
        }

        // Increment login count
        long logins = (long) userObject.getOrDefault("logins", 0L);
        userObject.put("logins", logins + 1);

        // Update session start time
        updateSessionStartTime(userObject);

        return true;
    }

// Safely retrieve and convert balance to long
    private long getBalance(JSONObject userObject) {
        Object balanceObj = userObject.getOrDefault("amount", 0L);

        if (balanceObj instanceof String) {
            return Long.parseLong((String) balanceObj); // Convert String to Long
        } else if (balanceObj instanceof Number) {
            return ((Number) balanceObj).longValue(); // Handle numeric types directly
        }
        return 0L; // Default to 0 if the type is unexpected
    }

// Update the session start time for regular users
    private void updateSessionStartTime(JSONObject userObject) {
        String currentTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date());
        userObject.put("startTime", currentTime); // Update start time with the current time
    }

// Redirect the admin to the Admin.java screen
    private void redirectToAdmin() {
        dispose(); // Close the login window
        Admin adminScreen = new Admin();
        adminScreen.setVisible(true);
    }

// Inside LoginW.java
    private void redirectToMembers(String username) {
        dispose(); // Close the login window
        Members memberScreen = new Members(username); // Pass the logged-in username to Members
        memberScreen.setVisible(true);
    }

// Update the method call in the main login logic
    private void handleUserLogin(String usernameInput, String passwordInput) throws IOException {
        try {
            filecheck(); // Verify file existence and parse user data
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "User database file not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } catch (org.json.simple.parser.ParseException ex) {
            JOptionPane.showMessageDialog(this, "Error parsing user database file.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean isUserFound = false;

        for (int i = 0; i < users.size(); i++) {
            JSONObject userObject = (JSONObject) users.get(i);

            // Validate if the username and password match
            if (isLoginValid(userObject, usernameInput, passwordInput)) {
                isUserFound = true;

                if (isAdmin(usernameInput)) {
                    // Redirect admin to Admin.java without updating session time
                    redirectToAdmin();
                    return;
                }

                // Check user balance and handle session update
                if (!processRegularUserLogin(userObject, usernameInput)) {
                    return; // Stop processing if balance is insufficient
                }
                // Redirect to Members.java with the logged-in username
                redirectToMembers(usernameInput);
                break;
            }
        }

        if (!isUserFound) {
            JOptionPane.showMessageDialog(this, "No account has been found.", "Login Failed", JOptionPane.ERROR_MESSAGE);
        }

        try {
            save(); // Save updated user data back to file
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving user data.", "Error", JOptionPane.ERROR_MESSAGE);
            throw ex;
        }
    }

    public static String getusname() {
        return usname;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LoginW().setVisible(true);
        });
    }

    public static void filecheck() throws FileNotFoundException, IOException, org.json.simple.parser.ParseException {
        try (FileReader reader = new FileReader(filepath)) {
            record = (JSONObject) jsonParser.parse(reader); // Parse the JSON file
            users = (JSONArray) record.get("users"); // Extract the "users" array
        }
    }

    public static void save() throws IOException {
        try (FileWriter file = new FileWriter(filepath)) {
            file.write(record.toJSONString());
            file.flush();
        } catch (IOException e) {
            Logger.getLogger(LoginW.class.getName()).log(Level.SEVERE, null, e);
            throw e;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JTextField nameTF;
    private javax.swing.JPasswordField passPF;
    // End of variables declaration//GEN-END:variables
}
