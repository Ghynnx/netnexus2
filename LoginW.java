import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.io.FileWriter;


/**
 *
 * @author User
 */
public class LoginW extends javax.swing.JFrame {
    private static String usname, pass;

    private static final String filepath = "C:\\Users\\User\\Documents\\NetBeansProjects\\NetNexus\\src\\netnexus.json";
    private static JSONParser jsonParser = new JSONParser();
    private static JSONObject record = new JSONObject();
    private static JSONArray users = new JSONArray();
    /**
     * Creates new form LoginW
     */
    public LoginW() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passPF = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 36)); // NOI18N
        jLabel1.setText("LOGIN");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Username:");

        nameTF.setText("jTextField1");
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Password:");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(nameTF)
                                    .addComponent(passPF, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(387, 387, 387)
                                .addComponent(jLabel1)))
                        .addGap(0, 398, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(416, 416, 416)
                        .addComponent(loginBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(loginBtn)
                .addContainerGap(163, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
    try {
            usname = nameTF.getText();
            pass = passPF.getText();

            try {
                filecheck();
            } catch (FileNotFoundException | org.json.simple.parser.ParseException ex) {
                Logger.getLogger(LoginW.class.getName()).log(Level.SEVERE, null, ex);
            }

            int checker = 0;
            for (int a = 0; a < users.size(); a++) {
                JSONObject userObject = (JSONObject) users.get(a);
                String searchedUname = (String) userObject.get("username");
                String searchedPswd = (String) userObject.get("password");

                if (usname.equals(searchedUname) && pass.equals(searchedPswd)) {
                    checker++;
                    long logins = (long) userObject.getOrDefault("logins", 0L);
                    userObject.put("logins", logins + 1);

                    // Set or update the session start time
                    updateSessionStartTime();

                    break;
                }
            }

            if (checker == 0) {
                JOptionPane.showMessageDialog(this, "No account has been found.", "Login Failed", JOptionPane.ERROR_MESSAGE);
            } else {
                dispose(); // Close login window and open dashboard
                Admin x = new Admin();
                x.setVisible(true);
            }

            save();
        } catch (IOException ex) {
            Logger.getLogger(LoginW.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    

    }//GEN-LAST:event_loginBtnActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed
private void updateSessionStartTime() {
    try {
        // Ensure the session array exists in the record
        JSONArray sessions = (JSONArray) record.getOrDefault("sessions", new JSONArray());

        boolean sessionFound = false;
        for (int i = 0; i < sessions.size(); i++) {
            JSONObject session = (JSONObject) sessions.get(i);
            String username = (String) session.get("username");

            if (username.equals(usname)) { // Match the username
                sessionFound = true;
                session.put("startTime", getCurrentTime()); // Update start time to current time
                session.put("active", true); // Activate the session
                break;
            }
        }

        if (!sessionFound) {
            // Create a new session for this user if no existing session is found
            JSONObject newSession = new JSONObject();
            newSession.put("username", usname);
            newSession.put("startTime", getCurrentTime());
            newSession.put("userTime", "01:00:00"); // Default user time (can be customized)
            newSession.put("remainingTime", "01:00:00");
            newSession.put("active", true);
            sessions.add(newSession); // Add the new session to the sessions array
        }

        record.put("sessions", sessions); // Update the sessions array in the record
    } catch (Exception e) {
        System.err.println("Error updating session start time: " + e.getMessage());
    }
}
    private String getCurrentTime() {
        // Return the current time in HH:mm:ss format
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        return sdf.format(new Date());
    }

    public static String getusname() {
        return usname;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    //</editor-fold>
    
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LoginW().setVisible(true);
        });
    }

        public static void filecheck() throws FileNotFoundException, IOException, org.json.simple.parser.ParseException {
        FileReader reader = new FileReader(filepath);

        if (reader.ready()) {
            Scanner scan = new Scanner(reader);
            String line = "";

            while (scan.hasNext()) {
                line = line + scan.nextLine();
            }


            if (!line.equals("")) {
                reader.close();
                try (FileReader read = new FileReader(filepath)) {
                    record = (JSONObject) jsonParser.parse(read);
                    users = (JSONArray) record.get("users");
                }
            }
        }
    }


    public static void save() throws IOException {
        try (FileWriter file = new FileWriter(filepath)) {
            file.write(record.toJSONString());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JTextField nameTF;
    private javax.swing.JPasswordField passPF;
    // End of variables declaration//GEN-END:variables
}


